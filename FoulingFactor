{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "S&T.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "ojBuaS46ZQ2q"
      },
      "source": [
        "import numpy as np\n",
        "from scipy.optimize import fsolve\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O1FMihe6Zgo4"
      },
      "source": [
        "# CORRECTION FACTOR F\n",
        "# input array T as [Ti,To,ti,to] where T is shell side and t is tube side\n",
        "\n",
        "def F(T):\n",
        "  Ti = T[0] \n",
        "  To = T[1]  \n",
        "  ti = T[2]  \n",
        "  to = T[3] \n",
        "\n",
        "  P = (to-ti)/(Ti-ti)\n",
        "  R = (Ti-To)/(to-ti)\n",
        "\n",
        "  term1 = np.sqrt(R**2+1)/(R-1)\n",
        "  term2_num = np.log10((1-P)/(1-P*R))\n",
        "  term2_den = np.log10((2/P-1-R+np.sqrt(R**2+1))/(2/P-1-R-np.sqrt(R**2+1)))\n",
        "  F = term1*term2_num/term2_den\n",
        "  return F"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qn-i6vub7Vjp"
      },
      "source": [
        "# MODEL SPECIFICATIONS\n",
        "# [Do,Di,L,N,baffle]\n",
        "\n",
        "m03008 = np.array([.00635, .00635-2*.0005588, .2032, 56, .0254])\n",
        "m03014 = np.array([.00635, .00635-2*.0005588, .3556, 56, .0381])\n",
        "m03024 = np.array([.00635, .00635-2*.0005588, .6069, 56, .0381])\n",
        "m03036 = np.array([.00635, .00635-2*.0005588, .9144, 56, .0508])\n",
        "\n",
        "m04014 = np.array([.00635, .00635-2*.0005588, .3556, 108, .0381])\n",
        "m04024 = np.array([.00635, .00635-2*.0005588, .6069, 108, .0508])\n",
        "m04036 = np.array([.00635, .00635-2*.0005588, .9144, 108, .0508])\n",
        "\n",
        "m05014 = np.array([.009525, .009525-2*.0005588, .3556, 80, .0381])\n",
        "m05024 = np.array([.009525, .009525-2*.0005588, .6069, 80, .0508])\n",
        "m05036 = np.array([.009525, .009525-2*.0005588, .9144, 80, .0508])\n",
        "\n",
        "m06024 = np.array([.009525, .009525-2*.0005588, .6069, 116, .0508])\n",
        "m06036 = np.array([.009525, .009525-2*.0005588, .9144, 116, .0762])\n",
        "m06048 = np.array([.009525, .009525-2*.0005588, 1.2192, 116, .0762])\n",
        "\n",
        "m08024 = np.array([.009525, .009525-2*.0005588, .6069, 210, .0508])\n",
        "m08036 = np.array([.009525, .009525-2*.0005588, .9144, 210, .0762])\n",
        "m08048 = np.array([.009525, .009525-2*.0005588, 1.2192, 210, .0762])\n",
        "m08060 = np.array([.009525, .009525-2*.0005588, 1.524, 210, .1016])\n",
        "m08072 = np.array([.009525, .009525-2*.0005588, 1.8288, 210, .1016])\n",
        "m08084 = np.array([.009525, .009525-2*.0005588, 2.1336, 210, .1016])\n",
        "m08096 = np.array([.009525, .009525-2*.0005588, 2.4384, 210, .1016])\n",
        "\n",
        "models = np.array([m03008,m03014,m03024,m03036,m04014,m04024,m04036,m05014,m05024,m05036,\\\n",
        "                   m06024,m06036,m06048,m08024,m08036,m08048,m08060,m08072,m08084,m08096])\n",
        "model_names = np.array(['03008','03014','03024','03036','04014','04024','04036','05014','05024','05036',\\\n",
        "                        '06024','06036','06048','08024','08036','08048','08060','08072','08084','08096'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fkZeVGgJgU2x"
      },
      "source": [
        "# HEAT TRANSFER CAPACITY FOR EACH MODEL\n",
        "\n",
        "g = 9.8\n",
        "hfg = (2441.4*1000+2323.2*1000)/2 #J/kg\n",
        "k_tube = (13+17)/2 #W/mK, averaging min and max values for 316 stainless steel\n",
        "\n",
        "def model_q(Rf,Tsteam,model):\n",
        "  Ti = Tsteam \n",
        "  To = Tsteam\n",
        "  dT1 = Ti-to\n",
        "  dT2 = To-ti\n",
        "  Tlm = (dT2-dT1)/np.log(dT2/dT1)\n",
        "\n",
        "  Do = model[0]\n",
        "  Di = model[1]\n",
        "  L = model[2]\n",
        "  N = model[3]\n",
        "\n",
        "  Ai = 3.14159/4*Di**2\n",
        "  Ao = 3.14159/4*Do**2\n",
        "\n",
        "  Re_water = rho_water*Vdot_water*Di/visc_water\n",
        "  Pr_water = visc_water*Cp_water/k_water\n",
        "  if Re_water < 2300:\n",
        "    Nu_i = 3.66\n",
        "  else:\n",
        "    Nu_i = .023*Re_water**(4/5)*Pr_water**(.4)\n",
        "  hi = Nu_i*k_water/L\n",
        "  hfg_prime = hfg + .68*Cp_water*(Tsteam-Ts)\n",
        "\n",
        "  P_num = k_water*L*(Tsat-Ts)\n",
        "  P_denom = visc_water*hfg_prime*(nu_water**2/g)**(1/3)\n",
        "  P = P_num/P_denom\n",
        "  if P < 15.8:\n",
        "    ho = .943*P**(-1/4)*k_water/(nu_water**2/g)**(1/3) \n",
        "  elif P <= 2530:\n",
        "    ho = 1/P*(.68*P+.89)**.82*k_water/(nu_water**2/g)**(1/3)\n",
        "  else:\n",
        "    ho = 1/P*((.042*P-53)*Pr_water**.5+89)**(4/3)\n",
        "  T = np.array([Ti,To,ti,to])\n",
        "\n",
        "  UA = 1/(1/hi/Ai + Rf/Ai + np.log(Do/Di)/(2*np.pi*k_tube*L)+1/ho/Ao)\n",
        "  q = UA*F(T)*Tlm\n",
        "  \n",
        "  return q\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RybQDfWhYAZi"
      },
      "source": [
        "# FUNCTIONS FOR WATER PROPERTIES\n",
        "def rho_water(T):\n",
        "  A, B, C, D, E, F, G = 17.874,\t35.618,\t19.655,\t-9.1306,\t-31.367,\t-813.56,\t-17421000\n",
        "  Tc = 647.096 # reference temperature in K\n",
        "  tau = 1 - T/Tc\n",
        "  rho_w = A + B*tau**(1/3) + C*tau**(2/3) + D*tau**(5/3) + E*tau**(16/3) + F*tau**(43/3) + G*tau**(110/3)\n",
        "  rho_w *= 18.02 # MW in kg/m3 \n",
        "  return rho_w # kg/m3\n",
        "\n",
        "def heat_capacity(T):\n",
        "  A, B, C, D, E = 276370,\t-2090.1,\t8.125,\t-0.014116,\t9.3701E-06\n",
        "  cp = A + B*T**(1) + C*T**(2) + D*T**(3) + E*T**(4)\n",
        "  cp /= 1000 # to get it into J/mol-K\n",
        "  return cp # J/mol-K\n",
        "\n",
        "def liq_viscosity(T):\n",
        "  A, B, C, D, E = -52.843,\t3703.6,\t5.866,\t-5.879E-29,\t10\n",
        "  visc = np.exp(A + B/T + C*np.log(T) + D*T**E)\n",
        "  return visc # Pa*s\n",
        "\n",
        "def liq_conductivity(T):\n",
        "  A, B, C, D, E = -0.432,\t0.0057255,\t-8.078E-06,\t1.861E-09, 0.0\n",
        "  k = A + B*T**(1) + C*T**(2) + D*T**(3) + E*T**(4)\n",
        "  return k # W/m-K\n",
        "\n",
        "\n",
        "#NOTE: In case you would like to see what each plot looks like, uncomment.\n",
        "#plt.plot(t, rho_water(t))\n",
        "#plt.plot(t, heat_capacity(t))\n",
        "#plt.plot(t, liq_viscosity(t))\n",
        "#plt.plot(t, liq_conductivity(t))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MqFke_2O1NCm",
        "outputId": "1fff442f-5fb9-485a-da58-6276065b1ac4"
      },
      "source": [
        "# USING OUR DATA\n",
        "# We plugged in the five average data points shown in the Excel sheet. This shows the calculation for one point, all Rf results are listed in an array (\"Rfs\") at the bottom of this script.\n",
        "\n",
        "Ti = 397.0303514 #K\n",
        "ti = 72.68657+273.15 #K\n",
        "to = 79.64618+273.15 #K\n",
        "params = np.array([43.89195,Ti,ti,to])\n",
        "model = m03014\n",
        "g = 9.8\n",
        "\n",
        "\n",
        "def inner(params,model):\n",
        "  Vdot = params[0]*6.309E-5/model[3] # convert to m3/s\n",
        "  Tsteam = params[1]\n",
        "  Ti = params[1]\n",
        "  To = params[1]\n",
        "  ti = params[2]\n",
        "  to = params[3]\n",
        "\n",
        "  Do = model[0]\n",
        "  Di = model[1]\n",
        "  L = model[4]\n",
        "  N = model[3]\n",
        "\n",
        "  Ai = 3.14159/4*Di**2\n",
        "  Ao = 3.14159/4*Do**2\n",
        "\n",
        "  visc_water = liq_viscosity((ti+to)/2)\n",
        "  rho = rho_water((ti+to)/2)\n",
        "  Cp_water = heat_capacity((ti+to)/2)\n",
        "  k_water = liq_conductivity((ti+to)/2)\n",
        "\n",
        "  Pr_water = visc_water*Cp_water/k_water\n",
        "  Re_water = rho*(Vdot/Ai)*Di/visc_water\n",
        "  #if Re_water < 2300:\n",
        "  #  Nu_i = 4.36\n",
        "  #else:\n",
        "  #  Nu_i = .023*Re_water**(4/5)*Pr_water**(.4)\n",
        "  #hi = Nu_i*k_water/Di\n",
        "\n",
        "  # Gnielinski correlation\n",
        "  f = (0.790*np.log(Re_water) - 1.64)**-2\n",
        "  Nu_i = (f/8)*(Re_water - 1000)*Pr_water/(1 + 12.7*(f/8)**(1/2)*(Pr_water**(2/3) - 1))\n",
        "  hi = Nu_i*k_water/Di\n",
        "\n",
        "  return hi\n",
        "\n",
        "print(\"hi =\" + str(inner(params,model)))\n",
        "\n",
        "def surfaceT(hoTs,params,model):\n",
        "  Ts = hoTs\n",
        "  #print('N=',model[3])\n",
        "\n",
        "  Vdot = params[0]*6.309E-5/model[3] # convert to m3/s\n",
        "  Tsteam = params[1]\n",
        "  ti = params[2]\n",
        "  to = params[3]\n",
        "\n",
        "  Do = model[0]\n",
        "  Di = model[1]\n",
        "  L = model[4]\n",
        "  N = model[3]\n",
        "\n",
        "  Ao = 3.14159*Do*L\n",
        "\n",
        "  Tfilm = (Ts+Tsteam)/2\n",
        "\n",
        "  Cp_film = heat_capacity(Tfilm)\n",
        "  hfg_prime = hfg + .68*Cp_film*(Tsteam-Ts) \n",
        "  k_cond = liq_conductivity(Tfilm)\n",
        "  Cp_water = heat_capacity((ti+to)/2)\n",
        "  nu_water = liq_viscosity(Tfilm)/rho_water(Tfilm)\n",
        "  visc_cond = liq_viscosity(Tfilm)\n",
        "  Pr_water = liq_viscosity(Tfilm)*Cp_film/k_cond\n",
        "\n",
        "  P_num = k_cond*L*(Tsteam-Ts)\n",
        "  P_denom = visc_cond*hfg_prime*(nu_water**2/g)**(1/3)\n",
        "  P = P_num/P_denom\n",
        "  if P < 15.8:\n",
        "    ho = .943*P**(-1/4)*k_cond/(nu_water**2/g)**(1/3) \n",
        "  elif P <= 2530:\n",
        "    ho = 1/P*(.68*P+.89)**.82*k_cond/(nu_water**2/g)**(1/3)\n",
        "  else:\n",
        "    ho = 1/P*((.042*P-53)*Pr_water**.5+89)**(4/3)*k_cond/(nu_water**2/g)**(1/3)\n",
        "  \n",
        "  mdot = Vdot*rho_water((ti+to)/2)\n",
        "\n",
        "  q1 = mdot*Cp_water*(to-ti) \n",
        "  \n",
        "  solver1 = ho*Ao*(Tsteam-Ts)-q1\n",
        "  return solver1\n",
        "\n",
        "guess = 396.5\n",
        "hoTs = fsolve(surfaceT,guess,args=(params,model))\n",
        "Ts = hoTs[0]\n",
        "\n",
        "print('Ts =', Ts)\n",
        "\n",
        "\n",
        "def outer(Ts,params,model):\n",
        "  Vdot = params[0]*6.309E-5/model[3] # convert to m3/s\n",
        "  Tsteam = params[1]\n",
        "  ti = params[2]\n",
        "  to = params[3]\n",
        "\n",
        "  Do = model[0]\n",
        "  Di = model[1]\n",
        "  L = model[4]\n",
        "  N = model[3]\n",
        "\n",
        "  Ao = 3.14159*Do*L\n",
        "\n",
        "  Tfilm = (Ts+Tsteam)/2\n",
        "\n",
        "  Cp_film = heat_capacity(Tfilm)\n",
        "  hfg_prime = hfg + .68*Cp_film*(Tsteam-Ts) \n",
        "  k_cond = liq_conductivity(Tfilm)\n",
        "  Cp_water = heat_capacity((ti+to)/2)\n",
        "  nu_water = liq_viscosity(Tfilm)/rho_water(Tfilm)\n",
        "  visc_cond = liq_viscosity(Tfilm)\n",
        "  Pr_water = liq_viscosity(Tfilm)*Cp_film/k_cond\n",
        "\n",
        "  P_num = k_cond*L*(Tsteam-Ts)\n",
        "  P_denom = visc_cond*hfg_prime*(nu_water**2/g)**(1/3)\n",
        "  P = P_num/P_denom\n",
        "  if P < 15.8:\n",
        "    ho = .943*P**(-1/4)*k_cond/(nu_water**2/g)**(1/3) \n",
        "  elif P <= 2530:\n",
        "    ho = 1/P*(.68*P+.89)**.82*k_cond/(nu_water**2/g)**(1/3)\n",
        "  else:\n",
        "    ho = 1/P*((.042*P-53)*Pr_water**.5+89)**(4/3)*k_cond/(nu_water**2/g)**(1/3)\n",
        "\n",
        "  return ho\n",
        "\n",
        "print('ho =', outer(Ts,params,model))\n",
        "\n",
        "\n",
        "def find_Rf(Rf,Ts,params,model):\n",
        "  hi = inner(params,model)\n",
        "  ho = outer(Ts,params,model)\n",
        "\n",
        "  Vdot = params[0]*6.309E-5/model[3] # convert to m3/s\n",
        "  Tsteam = params[1]\n",
        "  ti = params[2]\n",
        "  to = params[3]\n",
        "\n",
        "  Do = model[0]\n",
        "  Di = model[1]\n",
        "  L = model[4]\n",
        "  N = model[3]\n",
        "\n",
        "  mdot = Vdot*rho_water((ti+to)/2)\n",
        "  Cp_water = heat_capacity((ti+to)/2)\n",
        "\n",
        "  Ao = 3.14159*Do*L\n",
        "  Ai = 3.14159*Di*L\n",
        "\n",
        "  UA = 1/(1/hi/Ai + Rf/Ai + np.log(Do/Di)/(2*np.pi*k_tube*L)+1/ho/Ao)\n",
        "\n",
        "  T = np.array([Tsteam,Tsteam,ti,to])\n",
        "  Ti = Tsteam \n",
        "  To = Tsteam\n",
        "  dT1 = Ti-to\n",
        "  dT2 = To-ti\n",
        "  Tlm = (dT2-dT1)/np.log(dT2/dT1)\n",
        "\n",
        "  q1 = mdot*Cp_water*(to-ti)\n",
        "  q2 = UA*F(T)*Tlm\n",
        "\n",
        "  solver = q1-q2\n",
        "  return solver\n",
        "\n",
        "guess = .0004\n",
        "Rf = fsolve(find_Rf,guess,args=(Ts,params,model))\n",
        "print('Rf=', Rf)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hi =1205.9592987848714\n",
            "Ts = 395.7719852049105\n",
            "ho = 26478.348814562567\n",
            "Rf= [0.00028379]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PnCtAwcB1vcw"
      },
      "source": [
        "def model_q(Rf,Tsteam,model):\n",
        "  Ti = Tsteam \n",
        "  To = Tsteam\n",
        "  ti = 25+273.15\n",
        "  to = 75+273.15\n",
        "\n",
        "  dT1 = Ti-to\n",
        "  dT2 = To-ti\n",
        "  Tlm = (dT2-dT1)/np.log(dT2/dT1)\n",
        "  T = np.array([Tsteam,Tsteam,ti,to])\n",
        "\n",
        "  Vdot = 200*6.309E-5/model[3]\n",
        "\n",
        "  Do = model[0]\n",
        "  Di = model[1]\n",
        "  L = model[2]\n",
        "  N = model[3]\n",
        "\n",
        "  Ai = 3.14159*Di*L\n",
        "  Ao = 3.14159*Do*L\n",
        "\n",
        "  visc_water = liq_viscosity((ti+to)/2)\n",
        "  rho = rho_water((ti+to)/2)\n",
        "  Cp_water = heat_capacity((ti+to)/2)\n",
        "  k_water = liq_conductivity((ti+to)/2)\n",
        "\n",
        "  Re_water = rho*Vdot*Di/visc_water\n",
        "  Pr_water = visc_water*Cp_water/k_water\n",
        "  if Re_water < 2300:\n",
        "    Nu_i = 3.66\n",
        "  else:\n",
        "    Nu_i = .023*Re_water**(4/5)*Pr_water**(.4)\n",
        "  hi = Nu_i*k_water/L\n",
        "  hfg_prime = hfg + .68*Cp_water*(Tsteam-Ts)\n",
        "\n",
        "  hi = inner(params,model)\n",
        "  ho = outer(Ts,params,model)\n",
        "\n",
        "  UA = 1/(1/hi/Ai + Rf/Ai + np.log(Do/Di)/(2*np.pi*k_tube*L)+1/ho/Ao)\n",
        "  q = UA*F(T)*Tlm\n",
        "  \n",
        "  return q*model[3]\n",
        "\n",
        "#print(model_q(Rf,Tsteam,m08084))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GqOINIdg_8pk",
        "outputId": "6f416689-e06b-4526-ee43-d2526ac41836"
      },
      "source": [
        "# find q required for process\n",
        "Vdot_water = 200*6.309E-5 #m3/s\n",
        "mdot_water = Vdot_water*rho_water((25+273.15+75+273.15)/2)\n",
        "\n",
        "q_req = mdot_water*heat_capacity((25+273.15+75+273.15)/2)*(75-25)\n",
        "print('Required q =', np.round(q_req/1000,2), 'kJ/s (kW)')\n",
        "\n",
        "# LOOP THROUGH MODELS TO FIND POSSIBILITIES\n",
        "\n",
        "Rf = 0.00020674034642999996\n",
        "\n",
        "q_array = np.zeros(len(models))\n",
        "for i in range(len(models)):\n",
        "  q_array[i] = model_q(Rf, Tsteam,models[i])\n",
        "  print(model_names[i], 'gives a q of', np.round(model_q(Rf, Tsteam, models[i]),2)/1000, 'kW')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required q = 46.92 kJ/s (kW)\n",
            "03008 gives a q of [12.0918] kW\n",
            "03014 gives a q of [21.10298] kW\n",
            "03024 gives a q of [36.0163] kW\n",
            "03036 gives a q of [54.15065] kW\n",
            "04014 gives a q of [30.13009] kW\n",
            "04024 gives a q of [51.34269] kW\n",
            "04036 gives a q of [77.35666] kW\n",
            "05014 gives a q of [22.0109] kW\n",
            "05024 gives a q of [37.52735] kW\n",
            "05036 gives a q of [56.54145] kW\n",
            "06024 gives a q of [45.80081] kW\n",
            "06036 gives a q of [68.91546] kW\n",
            "06048 gives a q of [91.88727] kW\n",
            "08024 gives a q of [64.6457] kW\n",
            "08036 gives a q of [97.29933] kW\n",
            "08048 gives a q of [129.73244] kW\n",
            "08060 gives a q of [162.03607] kW\n",
            "08072 gives a q of [194.44328] kW\n",
            "08084 gives a q of [226.8505] kW\n",
            "08096 gives a q of [259.25771] kW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mmg8ljdjAclF"
      },
      "source": [
        "# To find UAs for the behavior figure at different pressures\n",
        "\n",
        "def steam_temp(T,P):\n",
        "  A = 73.649\n",
        "  B = -7258.2\n",
        "  C = -7.3037\n",
        "  D = 4.1653E-6\n",
        "  E = 2\n",
        "\n",
        "  p = np.exp(A+B/T+C*np.log(T)+D*T**E)\n",
        "  solver = P-p\n",
        "  return solver\n",
        "\n",
        "\n",
        "def model_q(Tsteam,ti,to,q):\n",
        "  Ti = Tsteam \n",
        "  To = Tsteam\n",
        "\n",
        "  dT1 = Ti-to\n",
        "  dT2 = To-ti\n",
        "  Tlm = (dT2-dT1)/np.log(dT2/dT1)\n",
        "  T = np.array([Tsteam,Tsteam,ti,to])\n",
        "\n",
        "  UA = q/F(T)/Tlm\n",
        "\n",
        "  return UA\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Owkor7WnbpXy",
        "outputId": "344cd540-aa79-4e52-c3e7-e1bb2d0105f3"
      },
      "source": [
        "# To find UAs for the behavior figure at different pressures\n",
        "\n",
        "#pressure = np.array([9.880168,20.12817,30.04442,39.7584,45.10842])*6894.76+86000\n",
        "pressure = np.array([9.959038,20.19692,30.21788,39.41325,45.38152,9.780447,19.87111,29.75127,39.98797,44.79081,9.901018,20.31648,30.1641,39.87399,45.15293])*6894.76+86000\n",
        "#inletT = np.array([67.9341,67.94011,73.11363,72.73362,66.85583])+273.15\n",
        "inletT = np.array([68.05113,66.02316,71.90305,75.47505,70.79245,68.07808,66.37334,75.99298,75.14556,70.68695,67.67309,71.42382,71.44485,67.58025,59.08809])+273.15\n",
        "#outletT = np.array([78.11816,81.02844,87.58055,89.41914,85.47731])+273.15\n",
        "outletT = np.array([78.11482,79.53485,86.60429,91.51766,88.72318,78.28611,79.66497,89.73252,91.24585,88.57759,77.95354,83.88577,86.40482,85.49391,79.13116])+273.15\n",
        "#qs = np.array([53.6041,68.89088,76.14711,87.82479,98.01477])*1000\n",
        "qs = np.array([52.97053,71.11783,77.38048,84.44078,94.379,53.73027,69.96094,72.31854,84.74442,94.16796,54.1115,65.59387,78.7423,94.28916,105.4974])*1000\n",
        "Tguess = 400\n",
        "\n",
        "steam = np.zeros(len(pressure))\n",
        "UAs = np.zeros(len(pressure))\n",
        "\n",
        "for i in range(len(pressure)):\n",
        "  steam[i] = fsolve(steam_temp,400,args=(pressure[i],))\n",
        "  UAs[i] = model_q(steam[i],inletT[i],outletT[i],qs[i])\n",
        "\n",
        "#print(steam)\n",
        "print(UAs) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1357.27422052 1394.50047925 1450.25792408 1512.59910428 1488.41594902\n",
            " 1389.14901964 1386.97898312 1464.1448687  1499.45562105 1490.81970923\n",
            " 1380.03434351 1417.94802923 1468.19152899 1495.30805849 1427.87941259]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2N-CerxhfkLX",
        "outputId": "93f6b924-125d-4f15-a108-b8be1f74b211"
      },
      "source": [
        "# To find UAs for the behavior figure at different flowrates\n",
        "\n",
        "#flowrate = np.array([19.9808,28.01324,36.01733,43.89195,49.94252])\n",
        "flowrate = np.array([20.00131,28.07858,35.9098,43.98409,49.90266,20.02625,27.90947,36.1623,43.87084,49.97321,19.91483,28.05168,36.02596,43.82092,49.95168])\n",
        "#inletT2 = np.array([48.90547,62.32844,69.39114,72.68657,74.19809])+273.15\n",
        "inletT2 = np.array([40.15393,64.68865,73.63545,76.44512,76.53269,67.28197,69.59711,71.71615,72.91369,73.79286,39.28051,52.69957,62.82182,68.70091,72.26872])+273.15\n",
        "#outletT2 = np.array([45.66916,53.6537,42.70834,52.91729,60.26007])+273.15\n",
        "outletT2 = np.array([59.02866,75.74059,36,62.95952,82.49674,86.73852,80.41206,79.67917,79.88877,79.88877,58.03233,65.37093,72.27441,76.06028,78.46504])+273.15\n",
        "#qs2 = np.array([88.94538,83.09018,80.76756,80.50462,80.00272])*1000\n",
        "qs2 = np.array([99.3543,81.66966,75.00045,75.75478,78.32719,69.20134,74.05394,77.68034,80.88609,80.2234,98.2805,93.54692,89.62188,84.87297,81.45757])*1000\n",
        "\n",
        "UAs2 = np.zeros(len(flowrate))\n",
        "\n",
        "Tsteam = fsolve(steam_temp,400,args=(20*6894.76+86000,))\n",
        "print(Tsteam)\n",
        "\n",
        "for i in range(len(flowrate)):\n",
        "  UAs2[i] = model_q(Tsteam,inletT2[i],outletT2[i],qs2[i])\n",
        "\n",
        "print(UAs2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[397.0303514]\n",
            "[1344.66639993 1527.2344583  1114.11685676 1405.54363768 1768.15826946\n",
            " 1498.21688802 1521.37426174 1615.8889067  1706.68779163 1707.83901502\n",
            " 1313.33511287 1447.23823865 1594.70081957 1650.83974221 1681.35935273]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:22: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bP5UQxathxSx",
        "outputId": "af29312f-a8d0-4441-abed-cc79318d6417"
      },
      "source": [
        "# fouling factors\n",
        "Rfs = np.array([0.0003241,0.00028379,0.00025305,0.00018245,-9.68826785e-06])\n",
        "Rf_calculated = np.average(Rfs)\n",
        "print(Rf_calculated)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.00020674034642999996\n"
          ]
        }
      ]
    }
  ]
}
